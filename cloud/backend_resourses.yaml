AWSTemplateFormatVersion: "2010-09-09"  # CloudFormation template version

# ===== TEMPLATE PARAMETERS =====
Parameters:
  # Application parameters
  AppPrefix:
    Type: String
    Default: skill-session
    Description: Prefix for naming resources
  
  # Region parameters
  AwsRegion:
    Type: String
    Description: AWS region for all resources
    Default: eu-north-1  # Default region (Stockholm)

  # Storage parameters
  CodeBucketName:
    Type: String
    Description: S3 bucket holding Lambda deployment packages
    Default: skill-session-lambda  # S3 bucket name for Lambda code

  # Authentication parameters  
  AuthDomainPrefix:
    Type: String
    MinLength: 3
    MaxLength: 63
    AllowedPattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
    Description: Cognito User Pool domain prefix
    Default: skillsessionusers

  # Database table parameters
  TableNameStudentProfiles:
    Type: String
    Default: student-profiles
    Description: Table for student profile information
    
  TableNameTeacherProfiles:
    Type: String
    Default: teacher-profiles
    Description: Table for teacher profile information
    
  TableNameAvailability:
    Type: String
    Description: Name of the DynamoDB table for tutor availability
    Default: teacher-availability
    
  TableNameTimeSlots:
    Type: String
    Description: Name of the DynamoDB table for individual time slots
    Default: time-slots
    
  TableNameBookings:
    Type: String
    Description: Name of the DynamoDB table for booking details
    Default: session-bookings

  # Lambda function parameters
  FunctionNameExpireSlots:
    Type: String
    Default: expire-slots-cronjob
    Description: Function to clean up expired time slots
    
  FunctionNameGetTeacherSlots:
    Type: String
    Default: get-teacher-slots
    Description: Function to retrieve teacher availability slots  
    
  FunctionNameCreateTeacherAvailability:
    Type: String
    Default: create-teacher-availability
    Description: Function to create teacher availability windows
    
  FunctionNameGetPendingBookingSlots:
    Type: String
    Default: get-pending-booking-slots
    Description: Function to get slots awaiting booking confirmation
    
  FunctionNameGetProfileImageURL:
    Type: String
    Default: get-profile-image-url
    Description: Function to get profile image URLs
    
  FunctionNameUploadProfileImage:
    Type: String
    Default: upload-profile-image
    Description: Function to upload profile images
    
  FunctionNameManageUserProfiles:
    Type: String
    Default: manage-user-profiles
    Description: Function to manage user profile data
    
  FunctionNameProcessBookingResponse:
    Type: String
    Default: process-booking-response
    Description: Function to process booking confirmations
    
  FunctionNameGetTeacherBookings:
    Type: String
    Default: get-teacher-bookings
    Description: Function to get a teacher's booked sessions
    
  FunctionNameSubscribeEmailNotification:
    Type: String
    Default: subscribe-email-notifications
    Description: Function to manage email subscriptions
    
  FunctionNameGetUserProfilesAndTeacherSearch:
    Type: String
    Default: get-user-profiles-and-teacher-search
    Description: Function for user profiles and teacher search
    
  FunctionNameCreateBookingRequest:
    Type: String
    Default: create-booking-request
    Description: Function to create a new booking request

  ScheduledJobRuleName:
    Type: String
    Default: expire-slots-scheduler
    Description: Name for the scheduled EventBridge rule

# ===== RESOURCES SECTION =====
Resources:
  # ===== DATABASE RESOURCES =====
  
  # Database tables first as they're foundational
  TableStudentProfiles:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      TableName: !Ref TableNameStudentProfiles

  TableTeacherProfiles:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      TableName: !Ref TableNameTeacherProfiles

  TableAvailability:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      TableName: !Ref TableNameAvailability

  TableTimeSlots:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      TableName: !Ref TableNameTimeSlots

  TableBookings:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "bookingId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "bookingId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      TableName: !Ref TableNameBookings

  # ===== AUTHENTICATION RESOURCES =====
  
  # User Pool for authentication and user management
  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UsernameConfiguration:
        CaseSensitive: false  # Usernames are not case sensitive
      Schema:  # User attributes schema definition
        - Name: first_name
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true
          StringAttributeConstraints:
            MinLength: "1"
            MaxLength: "2048"
        - Name: last_name
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true
          StringAttributeConstraints:
            MinLength: "1"
            MaxLength: "2048"
        - Name: email
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true
          StringAttributeConstraints:
            MinLength: "5"
            MaxLength: "2048"
        - Name: phone_number
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true
          StringAttributeConstraints:
            MinLength: "7"
            MaxLength: "2048"
        - Name: custom:userRole
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: false
          StringAttributeConstraints:
            MinLength: "1"
            MaxLength: "256"
      AutoVerifiedAttributes:
        - email  # Email is auto-verified on signup
      UserPoolName: !Sub ${AppPrefix}-user-pool
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE

  # App client for frontend application
  UserPoolClient:
    Type: AWS::Cognito::CognitoUserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: true
      GenerateSecret: false  # No client secret for SPA
      CallbackURLs:
        - http://localhost:3000
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - openid
      SupportedIdentityProviders:
        - COGNITO

  # Domain for hosted UI
  UserPoolDomain:
    Type: AWS::Cognito::CognitoUserPoolDomain
    Properties:
      Domain: !Ref AuthDomainPrefix
      UserPoolId: !Ref UserPool

  # ===== API GATEWAY =====
  
  # Main REST API for all endpoints
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AppPrefix}-api
      Description: "Skill Session APIs - Tutoring platform backend"

  # Cognito authorizer for protected endpoints
  ApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      IdentitySource: method.request.header.authorization
      Name: CognitoAuthorizer
      ProviderARNs:
        - !GetAtt UserPool.Arn
      RestApiId: !Ref ApiGateway
      Type: COGNITO_USER_POOLS

  # ===== LAMBDA FUNCTIONS =====

  # Scheduled task to expire old slots
  FunctionExpireSlots:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionNameExpireSlots
      Handler: index.handler
      Role: arn:aws:iam::835032380954:role/cronjob-role
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: cronjob.zip
      Runtime: nodejs20.x
      Timeout: 5
      TracingConfig:
        Mode: Active

  # Gets teacher availability slots
  FunctionGetTeacherSlots:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionNameGetTeacherSlots
      Handler: index.handler
      Role: arn:aws:iam::835032380954:role/role-dynamodb
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: get_teacher_slots_handler.zip
      Runtime: nodejs20.x
      Timeout: 5
      TracingConfig:
        Mode: Active

  # Creates teacher availability windows
  FunctionCreateTeacherAvailability:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionNameCreateTeacherAvailability
      Handler: index.handler
      Role: arn:aws:iam::835032380954:role/role-dynamodb
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: create_teacher_availability_handler.zip
      Runtime: nodejs20.x
      Timeout: 5
      TracingConfig:
        Mode: Active

  # Gets pending booking slots
  FunctionGetPendingBookingSlots:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionNameGetPendingBookingSlots
      Handler: index.handler
      Role: arn:aws:iam::835032380954:role/role-dynamodb
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: getBookingSlotInPending.zip
      Runtime: nodejs20.x
      Timeout: 5
      TracingConfig:
        Mode: Active

  # Gets profile image URLs from S3
  FunctionGetProfileImageURL:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionNameGetProfileImageURL
      Handler: index.handler
      Role: arn:aws:iam::835032380954:role/role-s3  # Role with S3 permissions
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: get_profile_image_url_handler.zip
      Runtime: nodejs20.x
      Timeout: 5
      TracingConfig:
        Mode: Active

  # Uploads profile images to S3
  FunctionUploadProfileImage:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionNameUploadProfileImage
      Handler: index.handler
      Role: arn:aws:iam::835032380954:role/role-s3  # S3 write permissions
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: upload_profile_image_handler.zip
      Runtime: nodejs20.x
      Timeout: 5
      TracingConfig:
        Mode: Active

  # User profile management
  FunctionManageUserProfiles:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionNameManageUserProfiles
      Handler: index.handler
      Role: arn:aws:iam::835032380954:role/role-dynamodb
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: manage_user_profiles_handler.zip
      Runtime: nodejs20.x
      Timeout: 5
      TracingConfig:
        Mode: Active

  # Permission for EventBridge to invoke Lambda
  PermissionCronJobInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt FunctionExpireSlots.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledJobRule.Arn

  # API Gateway permission for Lambda
  LambdaGetTeacherSlotsPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"  # Permission to invoke function
      FunctionName:
        "Fn::GetAtt":
          - LambdaGetTeacherSlots
          - Arn
      Principal: apigateway.amazonaws.com  # API Gateway is the invoker
      SourceArn:  # Resource path ARN pattern
        "Fn::Join":
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":":
            - Ref: "AWS::AccountId"
            - ":":
            - Ref: SkillSessionAPIs
            - "/*/POST/get-teacher-slots"  # Added leading slash for proper ARN format

  # Permission for API Gateway to invoke Lambda
  LambdaCreateTeacherAvailabilityPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        "Fn::GetAtt":
          - LambdaCreateTeacherAvailability
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        "Fn::Join":
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":":
            - Ref: "AWS::AccountId"
            - ":":
            - Ref: SkillSessionAPIs
            - "/*/POST/create-availability"  # Consistent format with slash

  # Permission for API Gateway to invoke Lambda
  LambdaGetPendingBookingSlotsPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        "Fn::GetAtt":
          - LambdaGetPendingBookingSlots
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        "Fn::Join":
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":":
            - Ref: "AWS::AccountId"
            - ":":
            - Ref: SkillSessionAPIs
            - "/*/GET/get-pending-booking-slots"  # Fixed format

  # Permission for API Gateway to invoke Lambda
  LambdaGetProfileImageURLPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        "Fn::GetAtt":
          - LambdaGetProfileImageURL
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        "Fn::Join":
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":":
            - Ref: "AWS::AccountId"
            - ":":
            - Ref: SkillSessionAPIs
            - "/*/GET/get-profile-img-url"

  # Permission for API Gateway to invoke Lambda
  LambdaUploadProfileImagePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        "Fn::GetAtt":
          - LambdaUploadProfileImage
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        "Fn::Join":
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":":
            - Ref: "AWS::AccountId"
            - ":":
            - Ref: SkillSessionAPIs
            - "/*/PUT/save-profile-img"  # PUT method for image upload

  # Permission for API Gateway to invoke Lambda
  LambdaManageUserProfilesPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        "Fn::GetAtt":
          - LambdaManageUserProfiles
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        "Fn::Join":
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":":
            - Ref: "AWS::AccountId"
            - ":":
            - Ref: SkillSessionAPIs
            - "/*/POST/save-user-details"

  # ===== EVENT SCHEDULER =====
  
  # EventBridge rule for scheduled tasks
  ScheduledJobRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Regular job to clean up expired slots"
      ScheduleExpression: "rate(2 hours)"
      Name: !Ref ScheduledJobRuleName
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt FunctionExpireSlots.Arn
          Id: ExpireSlotsCronJob

# ===== OUTPUTS =====
Outputs:
  UserPoolId:
    Value: !Ref UserPool
    Description: "The UserPool ID for authentication"
  
  UserPoolClientId:
    Value: !Ref UserPoolClient
    Description: "The app client ID for frontend integration"
  
  ApiEndpoint:
    Value: !Sub https://${ApiGateway}.execute-api.${AwsRegion}.amazonaws.com/prod/
    Description: "API Gateway endpoint URL"
  
  HostedUIURL:
    Value: !Sub https://${AuthDomainPrefix}.auth.${AwsRegion}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&scope=email+openid+phone+profile&redirect_uri=http://localhost:3000
    Description: "The hosted UI URL for authentication"
