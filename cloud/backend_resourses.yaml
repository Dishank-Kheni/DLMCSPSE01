AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  CognitoDomain:
    Type: String
    MinLength: 3
    MaxLength: 63
    AllowedPattern: ^[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?$
    Description: Cognito User Pool domain prefix
    Default: skillsessionusers # Name of the Cognito User Pool Domain

  region:
    Type: String
    Description: AWS region for all resources
    Default: eu-north-1 # Region of the resources

  LambdaCodeBucket:
    Type: String
    Description: S3 bucket holding Lambda deployment packages
    Default: skill-session-lambda # Name of the S3 bucket where the lambda code is stored

  StudentTableName: # Name of the DynamoDB table for student details
    Type: String
    Default: student
  SlotsTableName: # Name of the DynamoDB table for slots
    Type: String
    Description: Name of the DynamoDB table for individual time slots
    Default: slots
  TeacherTableName: # Name of the DynamoDB table for teacher details
    Type: String
    Default: teacher
  AvailabilityTableName: # Name of the DynamoDB table for availability
    Type: String
    Description: Name of the DynamoDB table for tutor availability
    Default: availability
  BookingTableName: # Name of the DynamoDB table for booking details
    Type: String
    Description: Name of the DynamoDB table for booking details
    Default: bookings

  LambdaExpireSlotsCronJob: # Name of the Lambda function for cron job
    Type: String
    Default: expire_slots_cronjob
  LambdaGetTeacherSlots: # Name of the Lambda function for get slot details
    Type: String
    Default: get_teacher_slots_handler
  LambdaCreateTeacherAvailability: # Name of the Lambda function for save availability
    Type: String
    Default: create_teacher_availability_handler
  LambdaGetPendingBookingSlots: # Name of the Lambda function for get booking slot in pending
    Type: String
    Default: get_pending_booking_slots_handler
  LambdaGetProfileImageURL: # Name of the Lambda function for get profile image
    Type: String
    Default: get_profile_image_url_handler
  LambdaUploadProfileImage: # Name of the Lambda function for save profile image
    Type: String
    Default: upload_profile_image_handler
  LambdaManageUserProfiles: # Name of the Lambda function for save user details
    Type: String
    Default: manage_user_profiles_handler
  LambdaProcessBookingResponse: # Name of the Lambda function for update request
    Type: String
    Default: process_booking_response_handler
  LambdaGetTeacherBookings: # Name of the Lambda function for get tutor bookings
    Type: String
    Default: get_teacher_bookings_handler
  LambdaSubscribeEmailNotification: # Name of the Lambda function for subscribe for email notification
    Type: String
    Default: subscribe_email_notifications_handler
  LambdaGetUserProfilesAndTeacherSearch: # Name of the Lambda function for get user details
    Type: String
    Default: get_user_profiles_and_teacher_search_handler
  LambdaCreateBookingRequest: # Name of the Lambda function for save booking details
    Type: String
    Default: create_booking_request_handler
  SSCronJobRule: # Name of the EventBridge Rule for cron job
    Type: String
    Default: cron-job-rule

Resources: # Resources to be created
  CognitoUserPool: # Cognito User Pool
    Type: "AWS::Cognito::UserPool" # Type of resource

    Properties: # Properties of the resource
      UsernameConfiguration: # Username configuration
        CaseSensitive: false # Username is not case sensitive
      Schema: # Schema of the user pool
        - Name: first_name
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true # Attribute can be changed
          Required: true # Attribute is required
          StringAttributeConstraints:
            MinLength: "0"
            MaxLength: "2048"
        - Name: last_name # Attribute name
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true
          StringAttributeConstraints:
            MinLength: "0"
            MaxLength: "2048"
        - Name: email
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true
          StringAttributeConstraints:
            MinLength: "0"
            MaxLength: "2048"
        - Name: phone_number
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true
          StringAttributeConstraints:
            MinLength: "0"
            MaxLength: "2048"
        - Name: userType
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: false
          StringAttributeConstraints:
            MinLength: "0"
            MaxLength: "2048"
      AutoVerifiedAttributes:
        - email
      UserPoolName: !Sub ${CognitoDomain}-user-pool # Name of the user pool
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE # Default email option

  CognitoUserPoolClient: # Cognito App Client
    Type: AWS::Cognito::CognitoUserPoolClient # Type of resource
    Properties:
      UserPoolId: !Ref CognitoUserPool # Reference to the user pool
      AllowedOAuthFlowsUserPoolClient: true # OAuth flow is enabled
      GenerateSecret: false
      CallbackURLs:
        - http://localhost:3000 # Callback URL
      AllowedOAuthFlows: # OAuth flows enabled
        - code # Authorization code grant flow
        - implicit # Implicit grant flow
      AllowedOAuthScopes: # OAuth scopes enabled
        - openid # OpenID Connect scope
      SupportedIdentityProviders: # Identity providers supported
        - COGNITO # Cognito user pool

  CognitoUserPoolDomain: # Cognito User Pool Domain
    Type: AWS::Cognito::CognitoUserPoolDomain # Type of resource
    Properties: # Properties of the resource
      Domain: !Ref CognitoDomain # Name of the domain
      UserPoolId: !Ref CognitoUserPool # Reference to the user pool

  LambdaCronJob: # Lambda function for cron job
    Type: AWS::Lambda::Function # Type of resource
    Properties: # Properties of the resource
      FunctionName: !Ref LambdaCronJob # Name of the function
      Handler: index.handler # Handler of the function
      Role: arn:aws:iam::8350
      32380954:role/cronjob-role # Role of the function
      Code: # Code of the function
        S3Bucket: !Ref LambdaCodeBucket # Reference to the S3 bucket
        S3Key: cronjob.zip # Name of the zip file
      Runtime: nodejs20.x # Runtime of the function
      Timeout: 5 # Timeout of the function
      TracingConfig: # Tracing configuration of the function
        Mode: Active # Tracing is enabled

  LambdaGetTeacherSlots:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref PLambdaGetSlotDetails
      Handler: index.handler
      Role: arn:aws:iam::835032380954:role/role-dynamodb
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: get_teacher_slots_handler.zip
      Runtime: nodejs20.x
      Timeout: 5
      TracingConfig:
        Mode: Active

  LambdaGetTeacherSlotsPermission: # Permission for the lambda function
    Type: "AWS::Lambda::Permission" # Type of resource
    Properties: # Properties of the resource
      Action: "lambda:invokeFunction" # Action to be performed
      FunctionName: # Reference to the lambda function
        "Fn::GetAtt": # Reference to the lambda function
          - LambdaGetTeacherSlots # Name of the lambda function
          - Arn # ARN of the lambda function
      Principal: apigateway.amazonaws.com # Principal of the permission
      SourceArn: # ARN of the source
        "Fn::Join": # Join the strings
          - "" # Joining character
          - - "arn:aws:execute-api:" # ARN of the API gateway
            - Ref: "AWS::Region" # Region of the API gateway
            - ":" # ARN of the API gateway
            - Ref: "AWS::AccountId" # Account ID of the API gateway
            - ":" # ARN of the API gateway
            - Ref: SkillSessionAPIs # Reference to the API gateway
            - /*/POST/get-teacher-slots # ARN of the API gateway

  LambdaCreateTeacherAvailability:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaCreateTeacherAvailability
      Handler: index.handler
      Role: arn:aws:iam::835032380954:role/role-dynamodb
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: create_teacher_availability_handler.zip
      Runtime: nodejs20.x
      Timeout: 5
      TracingConfig:
        Mode: Active

  LambdaCreateTeacherAvailabilityPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        "Fn::GetAtt":
          - LambdaCreateTeacherAvailability
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        "Fn::Join":
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":"
            - Ref: SkillSessionAPIs
            - /*/POST/create-availability

  LambdaGetPendingBookingSlots:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaGetPendingBookingSlots
      Handler: index.handler
      Role: arn:aws:iam::835032380954:role/role-dynamodb
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: getBookingSlotInPending.zip
      Runtime: nodejs20.x
      Timeout: 5
      TracingConfig:
        Mode: Active

  LambdaGetPendingBookingSlotsPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        "Fn::GetAtt":
          - LambdaGetPendingBookingSlots
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        "Fn::Join":
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":"
            - Ref: SkillSessionAPIs
            - /*/GET/get-pending-booking-slots

  LambdaGetProfileImageURL:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaGetProfileImageURL
      Handler: index.handler
      Role: arn:aws:iam::835032380954:role/role-s3
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: get_profile_image_url_handler.zip
      Runtime: nodejs20.x
      Timeout: 5
      TracingConfig:
        Mode: Active

  LambdaGetProfileImageURLPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        "Fn::GetAtt":
          - LambdaGetProfileImageURL
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        "Fn::Join":
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":"
            - Ref: SkillSessionAPIs
            - /*/GET/get-profile-img-url 

  LambdaUploadProfileImage:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaUploadProfileImage
      Handler: index.handler
      Role: arn:aws:iam::835032380954:role/role-s3
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: upload_profile_image_handler.zip
      Runtime: nodejs20.x
      Timeout: 5
      TracingConfig:
        Mode: Active

  LambdaUploadProfileImagePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        "Fn::GetAtt":
          - LambdaUploadProfileImage
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        "Fn::Join":
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":"
            - Ref: SkillSessionAPIs
            - /*/PUT/save-profile-img

  LambdaManageUserProfiles:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaManageUserProfiles
      Handler: index.handler
      Role: arn:aws:iam::835032380954:role/role-dynamodb
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: manage_user_profiles_handler.zip
      Runtime: nodejs20.x
      Timeout: 5
      TracingConfig:
        Mode: Active

  LambdaManageUserProfilesPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        "Fn::GetAtt":
          - LambdaManageUserProfiles
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        "Fn::Join":
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":"
            - Ref: SkillSessionAPIs
            - /*/POST/save-user-details

  LambdaUpdateRequest:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref PLambdaUpdateRequest
      Handler: index.handler
      Role: arn:aws:iam::835032380954:role/role-dynamodb
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: updateRequest.zip
      Runtime: nodejs20.x
      Timeout: 5
      TracingConfig:
        Mode: Active

  LambdaUpdateRequestPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        "Fn::GetAtt":
          - LambdaUpdateRequest
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        "Fn::Join":
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":"
            - Ref: SkillSessionAPIs
            - /*/POST/updaterequest

  LambdaGetTeacherBookings:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaGetTeacherBookings
      Handler: index.handler
      Role: arn:aws:iam::835032380954:role/role-dynamodb
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: get_teacher_bookings_handler.zip
      Runtime: nodejs20.x
      Timeout: 5
      TracingConfig:
        Mode: Active

  LambdaGetTeacherBookingsPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        "Fn::GetAtt":
          - LambdaGetTeacherBookings
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        "Fn::Join":
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":"
            - Ref: SkillSessionAPIs
            - /*/POST/get-tutor-bookings

  LambdaSubscribeEmailNotification:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaSubscribeEmailNotification
      Handler: index.handler
      Role: arn:aws:iam::835032380954:role/SNStest-role-072qricj
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: subscribe_email_notifications_handler.zip
      Runtime: nodejs20.x
      Timeout: 5
      TracingConfig:
        Mode: Active

  LambdaSubscribeEmailNotificationPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        "Fn::GetAtt":
          - LambdaSubscribeEmailNotification
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        "Fn::Join":
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":"
            - Ref: SkillSessionAPIs
            - /*/GET/subscribe

  LambdaGetUserProfilesAndTeacherSearch:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaGetUserProfilesAndTeacherSearch
      Handler: index.handler
      Role: arn:aws:iam::835032380954:role/role-dynamodb
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: get_user_profiles_and_teacher_search_handler.zip
      Runtime: nodejs20.x
      Timeout: 5
      TracingConfig:
        Mode: Active

  LambdaGetUserProfilesAndTeacherSearchPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        "Fn::GetAtt":
          - LambdaGetUserProfilesAndTeacherSearch
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        "Fn::Join":
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":"
            - Ref: SkillSessionAPIs
            - /*/POST/get-user-details

  LambdaProcessBookingResponse:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaProcessBookingResponse
      Handler: index.handler
      Role: arn:aws:iam::835032380954:role/role-dynamodb
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: process_booking_response_handler.zip
      Runtime: nodejs20.x
      Timeout: 5
      TracingConfig:
        Mode: Active

  LambdaProcessBookingResponsePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        "Fn::GetAtt":
          - LambdaProcessBookingResponse
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        "Fn::Join":
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":"
            - Ref: SkillSessionAPIs
            - /*/POST/saveslot-booking

  DBAvailability:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      TableName: !Ref AvailabilityTableName
  DBBooking:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "bookingId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "bookingId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      TableName: !Ref BookingTableName
  DBSlots:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      TableName: !Ref SlotsTableName
  DBStudent:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      TableName: !Ref StudentTableName
  DBTeacher:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      TableName: !Ref TeacherTableName

  CronJobRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "CronJob"
      ScheduleExpression: "rate(2 hour)"
      Name: !Ref SSCronJobRule
      State: "ENABLED"
      Targets:
        - Arn:
            "Fn::GetAtt":
              - LambdaCronJob
              - Arn
          Id: CronJobId

  SkillSessionAPIs:
    Type: AWS::ApiGateway::RestApi

    Properties:
      Name: SkillSession 
      Description: Skill Session APIs

  SkillSessionAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      IdentitySource: method.request.header.authorization
      Name: CognitoAuthorizer
      ProviderARNs:
        - {
            "Fn::Join":
              [
                "",
                [
                  "arn:aws:cognito-idp:",
                  { Ref: "AWS::Region" },
                  ":",
                  { Ref: "AWS::AccountId" },
                  ":userpool/",
                  Ref: UserPool,
                ],
              ],
          }

      RestApiId: !Ref SkillSessionAPIs
      Type: COGNITO_USER_POOLS

  ResourceGetTeacherSlot:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SkillSessionAPIs
      PathPart: get-availability
      ParentId:
        Fn::GetAtt:
          - SkillSessionAPIs
          - RootResourceId

  GetTeacherSlotsOption:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: SkillSessionAPIs
      ResourceId:
        Ref: ResourceGetSlotDetails
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              application/json: ""
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false

  GetTeacherSlotsPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref SkillSessionAuthorizer
      HttpMethod: POST
      ResourceId:
        Ref: ResourceGetSlotDetails
      RestApiId:
        Ref: SkillSessionAPIs

      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          "Fn::Join":
            - ""
            - - "arn:aws:apigateway:"
              - Ref: "AWS::Region"
              - ":lambda:path/2015-03-31/functions/"
              - "Fn::GetAtt":
                  - LambdaGetSlotDetails
                  - Arn
              - /invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'POST'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"

            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false

  ResourceGetProfileImageURL:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SkillSessionAPIs
      PathPart: get-profile-image-url
      ParentId:
        Fn::GetAtt:
          - SkillSessionAPIs
          - RootResourceId

  GetProfileImageURLOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: SkillSessionAPIs
      ResourceId:
        Ref: ResourceGetProfileImageURL
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              application/json: ""
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false
  GetProfileImageGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref SkillSessionAuthorizer
      HttpMethod: GET
      ResourceId:
        Ref: ResourceGetProfileImage
      RestApiId:
        Ref: SkillSessionAPIs

      Integration:
        IntegrationHttpMethod: GET
        Type: AWS_PROXY
        Uri:
          "Fn::Join":
            - ""
            - - "arn:aws:apigateway:"
              - Ref: "AWS::Region"
              - ":lambda:path/2015-03-31/functions/"
              - "Fn::GetAtt":
                  - LambdaGetProfileImg
                  - Arn
              - /invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'GET'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"

            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false

  ResourceTeacherBooking:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SkillSessionAPIs
      PathPart: get-teacher-bookings
      ParentId:
        Fn::GetAtt:
          - SkillSessionAPIs
          - RootResourceId
  TutorBookingOption:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: SkillSessionAPIs
      ResourceId:
        Ref: ResourceTeacherBooking
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              application/json: ""
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false
  TeacherBookingGet:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref SkillSessionAuthorizer
      HttpMethod: POST
      ResourceId:
        Ref: ResourceTutorBooking
      RestApiId:
        Ref: SkillSessionAPIs

      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          "Fn::Join":
            - ""
            - - "arn:aws:apigateway:"
              - Ref: "AWS::Region"
              - ":lambda:path/2015-03-31/functions/"
              - "Fn::GetAtt":
                  - LambdaGetTeacherBookings
                  - Arn
              - /invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'GET'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"

            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false

  ResourceUserDetails:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SkillSessionAPIs
      PathPart: get-user-details
      ParentId:
        Fn::GetAtt:
          - SkillSessionAPIs
          - RootResourceId
  UserDetailsOption:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: SkillSessionAPIs
      ResourceId:
        Ref: ResourceUserDetails
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              application/json: ""
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false
  UserDetailsPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref SkillSessionAuthorizer
      HttpMethod: POST
      ResourceId:
        Ref: ResourceUserDetails
      RestApiId:
        Ref: SkillSessionAPIs

      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          "Fn::Join":
            - ""
            - - "arn:aws:apigateway:"
              - Ref: "AWS::Region"
              - ":lambda:path/2015-03-31/functions/"
              - "Fn::GetAtt":
                  - LambdaGetUserProfilesAndTeacherSearch
                  - Arn
              - /invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'GET'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"

            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false

  ResourceBookingSlotInPending:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SkillSessionAPIs
      PathPart: getbookingslotinpending
      ParentId:
        Fn::GetAtt:
          - SkillSessionAPIs
          - RootResourceId
  BookingSlotInPendingOption:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: SkillSessionAPIs
      ResourceId:
        Ref: ResourceBookingSlotInPending
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              application/json: ""
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false
  BookingSlotInPendingPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref SkillSessionAuthorizer
      HttpMethod: POST
      ResourceId:
        Ref: ResourceBookingSlotInPending
      RestApiId:
        Ref: SkillSessionAPIs

      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          "Fn::Join":
            - ""
            - - "arn:aws:apigateway:"
              - Ref: "AWS::Region"
              - ":lambda:path/2015-03-31/functions/"
              - "Fn::GetAtt":
                  - LambdaGetBookingSlotInPending
                  - Arn
              - /invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'GET'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"

            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false

  ResourceSaveAvailability:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SkillSessionAPIs
      PathPart: save-availability
      ParentId:
        Fn::GetAtt:
          - SkillSessionAPIs
          - RootResourceId
  SaveAvailabilityOption:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: SkillSessionAPIs
      ResourceId:
        Ref: ResourceSaveAvailability
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              application/json: ""
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false
  SaveAvailabilityPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref SkillSessionAuthorizer
      HttpMethod: POST
      ResourceId:
        Ref: ResourceSaveAvailability
      RestApiId:
        Ref: SkillSessionAPIs

      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          "Fn::Join":
            - ""
            - - "arn:aws:apigateway:"
              - Ref: "AWS::Region"
              - ":lambda:path/2015-03-31/functions/"
              - "Fn::GetAtt":
                  - LambdaSaveAvailability
                  - Arn
              - /invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'GET'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"

            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false

  ResourceSaveProfileImage:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SkillSessionAPIs
      PathPart: save-profile-img
      ParentId:
        Fn::GetAtt:
          - SkillSessionAPIs
          - RootResourceId
  SaveProfileImageOption:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: SkillSessionAPIs
      ResourceId:
        Ref: ResourceSaveProfileImage
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              application/json: ""
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false
  SaveProfileImagePut:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref SkillSessionAuthorizer
      HttpMethod: PUT
      ResourceId:
        Ref: ResourceSaveProfileImage
      RestApiId:
        Ref: SkillSessionAPIs

      Integration:
        IntegrationHttpMethod: PUT
        Type: AWS_PROXY
        Uri:
          "Fn::Join":
            - ""
            - - "arn:aws:apigateway:"
              - Ref: "AWS::Region"
              - ":lambda:path/2015-03-31/functions/"
              - "Fn::GetAtt":
                  - LambdaUploadProfileImage
                  - Arn
              - /invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'PUT'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"

            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false

  ResourecSaveUserDetails:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SkillSessionAPIs
      PathPart: save-user-details
      ParentId:
        Fn::GetAtt:
          - SkillSessionAPIs
          - RootResourceId
  SaveUserDetailsOption:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: SkillSessionAPIs
      ResourceId:
        Ref: ResourecSaveUserDetails
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              application/json: ""
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false
  SaveUserDetailsPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref SkillSessionAuthorizer
      HttpMethod: POST
      ResourceId:
        Ref: ResourecSaveUserDetails
      RestApiId:
        Ref: SkillSessionAPIs

      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          "Fn::Join":
            - ""
            - - "arn:aws:apigateway:"
              - Ref: "AWS::Region"
              - ":lambda:path/2015-03-31/functions/"
              - "Fn::GetAtt":
                  - LambdaManageUserProfiles
                  - Arn
              - /invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'POST'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"

            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false

  ResourceSaveSlotBooking:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SkillSessionAPIs
      PathPart: saveslot-booking
      ParentId:
        Fn::GetAtt:
          - SkillSessionAPIs
          - RootResourceId
  SaveSlotBookingOption:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: SkillSessionAPIs
      ResourceId:
        Ref: ResourceSaveSlotBooking
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              application/json: ""
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false
  SaveSlotBookingPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref SkillSessionAuthorizer
      HttpMethod: POST
      ResourceId:
        Ref: ResourceSaveSlotBooking
      RestApiId:
        Ref: SkillSessionAPIs

      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          "Fn::Join":
            - ""
            - - "arn:aws:apigateway:"
              - Ref: "AWS::Region"
              - ":lambda:path/2015-03-31/functions/"
              - "Fn::GetAtt":
                  - LambdaProcessBookingResponse
                  - Arn
              - /invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'POST'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"

            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false

  ResourceSubscribe:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SkillSessionAPIs
      PathPart: subscribe
      ParentId:
        Fn::GetAtt:
          - SkillSessionAPIs
          - RootResourceId
  SubscribeOption:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: SkillSessionAPIs
      ResourceId:
        Ref: ResourceSubscribe
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              application/json: ""
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false
  SubscribeGET:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId:
        Ref: ResourceSubscribe
      RestApiId:
        Ref: SkillSessionAPIs

      Integration:
        IntegrationHttpMethod: GET
        Type: AWS_PROXY
        Uri:
          "Fn::Join":
            - ""
            - - "arn:aws:apigateway:"
              - Ref: "AWS::Region"
              - ":lambda:path/2015-03-31/functions/"
              - "Fn::GetAtt":
                  - LambdaSubscribeEmailNotification
                  - Arn
              - /invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'GET'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"

            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false

  ResourceUpdateRequest:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SkillSessionAPIs
      PathPart: updaterequest
      ParentId:
        Fn::GetAtt:
          - SkillSessionAPIs
          - RootResourceId
  UpdateRequestOption:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: SkillSessionAPIs
      ResourceId:
        Ref: ResourceUpdateRequest
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'OPTIONS'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              application/json: ""
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false
  UpdateRequestPost:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref SkillSessionAuthorizer
      HttpMethod: POST
      ResourceId:
        Ref: ResourceUpdateRequest
      RestApiId:
        Ref: SkillSessionAPIs

      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          "Fn::Join":
            - ""
            - - "arn:aws:apigateway:"
              - Ref: "AWS::Region"
              - ":lambda:path/2015-03-31/functions/"
              - "Fn::GetAtt":
                  - LambdaUpdateRequest
                  - Arn
              - /invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'POST'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"

            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": false
            "method.response.header.Access-Control-Allow-Methods": false
            "method.response.header.Access-Control-Allow-Origin": false

  LambdaCronJobPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        "Fn::GetAtt":
          - LambdaCronJob
          - Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - CronJobRule
          - "Arn"

Outputs:
  CognitoUserPoolID:
    Value: !Ref UserPool
    Description: The UserPool ID
  CognitoAppClientID:
    Value: !Ref UserPoolClient
    Description: The app client
  HostedUIURL:
    Value: !Sub https://${CognitoDomain}.auth.us-west-2.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&scope=email+openid+phone+profile&redirect_uri=http://localhost:3000
    Description: The hosted UI URL
